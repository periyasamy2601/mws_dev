pipeline {
    agent none

    parameters {
        booleanParam(name: 'MIGRATE', defaultValue: true, description: 'Run database migrations')
    }

    stages {

        stage('Load Environment') {
            agent { label 'build-node' }
            steps {
                script {
                    def envProps = readProperties file: 'avk/env/.env.development'
                    envProps.each { key, value -> env["${key}"] = "${value}" }
                    echo "Environment variables loaded from .env"
                }
            }
        }

        stage('Checkout Code') {
            agent { label 'build-node' }
            steps {
                deleteDir()
                git branch: 'main', url: 'https://github.com/periyasamy2601/mws_dev.git', credentialsId: 'github_token_dev'
            }
        }

        stage('SonarQube Scan') {
            agent { label 'build-node' }
            steps {
                dir('avk') {
                    withCredentials([string(credentialsId: 'sonarqube_token', variable: 'SONAR_TOKEN')]) {
                        script {
                            def scannerHome = tool 'sonar scanner'
                            sh """
                                ${scannerHome}/bin/sonar-scanner \
                                -Dsonar.projectKey=${env.SONAR_PROJECT_KEY} \
                                -Dsonar.projectName=${env.SONAR_PROJECT_NAME} \
                                -Dsonar.sources=. \
                                -Dsonar.host.url=${env.SONAR_HOST} \
                                -Dsonar.token=${SONAR_TOKEN} \
                                -Dsonar.scanner.workDirectory=${env.WORKSPACE}/.sonar
                            """
                        }
                    }
                }
            }
        }

        stage('Build Application') {
            agent { label 'build-node' }
            steps {
                dir('avk') {
                    // Install dependencies and build TypeScript to dist/
                    sh 'npm install && npm run build'
                    // Stash the dist folder for Docker context
                    stash includes: 'dist/**', name: 'build-artifacts'
                }
            }
        }

        stage('Run Database Migrations') {
            agent { label 'build-node' }
            when {
                allOf {
                    expression { params.MIGRATE == true }
                    expression { fileExists('avk/migrate.sh') }
                }
            }
            steps {
                dir('avk') {
                    script {
                        try {
                            echo "Backing up database..."
                            sh """
                                PGPASSWORD=${env.DB_PASS} pg_dump -h ${env.DB_HOST} -U ${env.DB_USER} -p ${env.DB_PORT} \
                                -F p -f ${env.BACKUP_FILE} ${env.DB_NAME}
                            """

                            echo "Restoring database (plain text format)..."
                            sh """
                                PGPASSWORD=${env.DB_PASS} psql -h ${env.DB_HOST} -U ${env.DB_USER} -p ${env.DB_PORT} \
                                -d ${env.DB_NAME} -f ${env.BACKUP_FILE}
                            """

                            echo "Running migrations..."
                            sh 'chmod +x migrate.sh && ./migrate.sh'

                            echo "Migrations completed."
                        } catch (err) {
                            echo "Migration failed! Restoring database..."
                            sh """
                                PGPASSWORD=${env.DB_PASS} psql -h ${env.DB_HOST} -U ${env.DB_USER} -p ${env.DB_PORT} \
                                -d ${env.DB_NAME} -f ${env.BACKUP_FILE}
                            """
                            error "Migration failed. Database restored."
                        }
                    }
                }
            }
        }

      stage('Build Docker Image') {
    agent { label 'docker-node' }
    steps {
        dir('avk') {
            unstash 'build-artifacts'
            script {
                // Define image tag
                def IMAGE_TAG = "${env.VERSION ?: '1.0.0'}.${env.BUILD_NUMBER ?: '1'}"

                // Load environment variables from .env.development
                def envProps = readProperties file: 'avk/env/.env.development'
                envProps.each { key, value -> env["${key}"] = "${value}" }

                // Build & push Docker image with Docker Hub credentials
                withCredentials([usernamePassword(credentialsId: 'docker-hub-creds', 
                                                  usernameVariable: 'DOCKER_USER', 
                                                  passwordVariable: 'DOCKER_PASS')]) {
                    sh """
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker build -t ${env.DOCKER_IMAGE}:${IMAGE_TAG} \
                          --build-arg DB_HOST=${env.DB_HOST} \
                          --build-arg DB_PORT=${env.DB_PORT} \
                          --build-arg DB_NAME=${env.DB_NAME} \
                          --build-arg DB_USER=${env.DB_USER} \
                          --build-arg DB_PASS=${env.DB_PASS} \
                          -f Dockerfile .
                        docker push ${env.DOCKER_IMAGE}:${IMAGE_TAG}
                    """
                }
                echo "Docker image built and pushed: ${env.DOCKER_IMAGE}:${IMAGE_TAG}"
            }
        }
    }
}


        stage('Deploy to Development') {
            agent { label 'docker-node' }
            steps {
                script {
                    def IMAGE_TAG = "${env.VERSION ?: '1.0.0'}.${env.BUILD_NUMBER ?: '1'}"
                    sh """
                        docker run -d --name mws_avk_api_dev1 \
                            -p 3000:3000 \
                            -e HOST=0.0.0.0 \
                            -e DB_HOST=${env.DB_HOST} \
                            -e DB_PORT=${env.DB_PORT} \
                            -e DB_NAME=${env.DB_NAME} \
                            -e DB_USER=${env.DB_USER} \
                            -e DB_PASSWORD=${env.DB_PASS} \
                            ${env.DOCKER_IMAGE}:${IMAGE_TAG}
                    """
                    sh "docker image prune -af || true"
                    echo "Deployment to Development completed."
                }
            }
        }

    } // stages
}
