pipeline {
    agent any
    environment {
        NODE_ENV = "development"
        // Optional: specify path to npm binary if using nvm
        PATH = "${env.HOME}/.nvm/versions/node/v24.7.0/bin:${env.PATH}"
    }
    stages {

        stage('Checkout SCM') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [],
                    userRemoteConfigs: [[
                        url: 'https://github.com/periyasamy2601/mws_dev.git',
                        credentialsId: 'github_token_dev'
                    ]]
                ])
            }
        }

        stage('Prepare NPM Config') {
            steps {
                // Copy your .npmrc from repo or create dynamically
                sh 'cp pipeline/src/.npmrc . || echo "No .npmrc found"'
            }
        }

        stage('Check Node & NPM') {
            steps {
                sh 'node -v'
                sh 'npm -v'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }

        stage('Build') {
            steps {
                sh 'npm run build'
            }
        }

        stage('Make JS Executable') {
            steps {
                sh 'find ./dist -type f -name "*.js" -exec chmod +x {} \\;'
            }
        }

        stage('DB Migration') {
            steps {
                sh 'npm run dev-migrate'
            }
        }

        stage('Docker Build & Push') {
            steps {
                sh 'npm run docker:build'
                sh 'docker tag mws-dconag-api mwsdev2025/mws_avk_api:latest'
                sh 'docker push mwsdev2025/mws_avk_api:latest'
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline finished successfully.'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
