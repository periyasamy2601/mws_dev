pipeline {
    agent none

    parameters {
        booleanParam(name: 'MIGRATE', defaultValue: true, description: 'Run database migrations')
    }

    stages {

        stage('Load Environment') {
            agent { label 'build-node' }
            steps {
                script {
                    // Load environment variables from .env
                    def envProps = readProperties file: 'pipeline/src/.env'
                    envProps.each { key, value ->
                        env["${key}"] = "${value}"
                    }
                    echo "✅ Environment variables loaded from .env"
                }
            }
        }

        stage('Checkout') {
            agent { label 'build-node' }
            steps {
                deleteDir()
                git branch: 'main', url: 'https://github.com/periyasamy2601/mws_dev.git'
            }
        }

        stage('SonarQube Scan') {
            agent { label 'build-node' }
            steps {
                script {
                    def SRC_DIR = "pipeline/src"
                    dir("${SRC_DIR}") {
                        withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_TOKEN')]) {
                            sh """
                                export sonar scanner=${WORKSPACE}/.sonar
                                sonar-scanner \
                                    -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                                    -Dsonar.projectName=${SONAR_PROJECT_NAME} \
                                    -Dsonar.sources=. \
                                    -Dsonar.host.url=${SONAR_HOST} \
                                    -Dsonar.login=${SONAR_TOKEN} \
                                    -Dsonar.scanner.workDirectory=${WORKSPACE}/.sonar
                            """
                        }
                    }
                }
            }
        }

        stage('Install Dependencies') {
            agent { label 'build-node' }
            steps {
                dir("pipeline/src") {
                    sh 'npm install'
                    sh 'npm install --save-dev @loopback/build'
                }
            }
        }

        stage('Build Application') {
            agent { label 'build-node' }
            steps {
                dir("pipeline/src") {
                    sh 'npm run build'
                }
            }
        }

        stage('Verify Build Artifacts') {
            agent { label 'build-node' }
            steps {
                script {
                    def DIST_DIR = "pipeline/src/dist"
                    if (!fileExists(DIST_DIR)) {
                        error "❌ Build artifacts not found in ${DIST_DIR}. Run 'npm run build' first."
                    } else {
                        echo "✅ Build artifacts found in ${DIST_DIR}"
                        sh "ls -l ${DIST_DIR}"
                    }
                }
            }
        }

        stage('Run Database Migrations') {
            agent { label 'build-node' }
            when {
                allOf {
                    expression { params.MIGRATE == true }
                    expression { fileExists('pipeline/src/dist/migrate.js') }
                }
            }
            steps {
                dir("pipeline/src") {
                    script {
                        try {
                            echo "Backing up database..."
                            sh """
                                PGPASSWORD=${DB_PASS} pg_dump -h ${DB_HOST} -U ${DB_USER} -p ${DB_PORT} \
                                -F p -f ${BACKUP_FILE} ${DB_NAME}
                            """
                            echo "Running migrations..."
                            sh "node dist/migrate.js"
                            echo "✅ Migrations completed."
                        } catch (err) {
                            echo "❌ Migration failed! Restoring database..."
                            sh """
                                PGPASSWORD=${DB_PASS} psql -h ${DB_HOST} -U ${DB_USER} -p ${DB_PORT} \
                                -d ${DB_NAME} -f ${BACKUP_FILE}
                            """
                            error "Migration failed. Database restored."
                        }
                    }
                }
            }
        }

        stage('Build Docker Image') {
            agent { label 'docker-node' }
            steps {
                dir('pipeline/src') {
                    script {
                        if (!fileExists("dist")) {
                            error "❌ dist folder not found. Run 'npm run build' first."
                        }

                        def IMAGE_TAG = "${VERSION}.${BUILD_NUMBER}"

                        withCredentials([usernamePassword(credentialsId: 'docker-hub-creds', 
                                                          usernameVariable: 'DOCKER_USER', 
                                                          passwordVariable: 'DOCKER_PASS')]) {
                            sh """
                                docker login -u $DOCKER_USER -p $DOCKER_PASS
                                docker build -t ${DOCKER_IMAGE}:${IMAGE_TAG} -f Dockerfile .
                                docker push ${DOCKER_IMAGE}:${IMAGE_TAG}
                            """
                        }
                    }
                }
            }
        }

        stage('Deploy to Development') {
            agent { label 'docker-node' }
            steps {
                script {
                    def IMAGE_TAG = "${VERSION}.${BUILD_NUMBER}"
                    sh """
                        echo "Stopping old container if exists..."
                        docker rm -f mws_avk_api_dev || true

                        echo "Starting new container..."
                        docker run -d --name mws_avk_api_dev \\
                            -p 3000:3000 \\
                            -e DB_HOST=${DB_HOST} \\
                            -e DB_PORT=${DB_PORT} \\
                            -e DB_NAME=${DB_NAME} \\
                            -e DB_USER=${DB_USER} \\
                            -e DB_PASS=${DB_PASS} \\
                            ${DOCKER_IMAGE}:${IMAGE_TAG}
                    """
                }
            }
        }
    }

    post {
        success {
            echo "✅ Pipeline finished successfully."
        }
        failure {
            echo "❌ Pipeline failed."
        }
        always {
            node('build-node') {
                cleanWs()
            }
        }
    }
}
