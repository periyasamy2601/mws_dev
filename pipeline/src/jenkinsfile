pipeline {
    agent none

    parameters {
        booleanParam(name: 'MIGRATE', defaultValue: true, description: 'Run database migrations')
    }

    environment {
        DOCKER_IMAGE       = "mwsdev2025/mws_avk_api"
        CONTAINER_NAME     = "mws_avk_api_dev"
        HOST_IP            = "192.168.2.20"
        HOST_PORT          = "3000"
        CONTAINER_PORT     = "3000"

        SONAR_HOST         = "http://192.168.2.20:9000"
        SONAR_PROJECT_KEY  = "mws_avk_api"
        SONAR_PROJECT_NAME = "mws_avk_api"

        DB_HOST            = "192.168.2.20"
        DB_PORT            = "5432"
        DB_NAME            = "mws_avk_api"
        DB_USER            = "mws_avk_api"
        DB_PASS            = "qwert"
        BACKUP_FILE        = "/tmp/${DB_NAME}_backup.sql"

        NPM_TOKEN          = credentials('github_npm_token')
    }

    stages {

        stage('Clean Workspace & Checkout') {
            agent { label 'build-node' }
            steps {
                deleteDir()
                git branch: 'main', url: 'https://github.com/periyasamy2601/mws_dev.git'
            }
        }

        stage('Verify Required Files') {
            agent { label 'build-node' }
            steps {
                script {
                    def requiredFiles = ['pipeline/src/package.json', 'pipeline/src/Dockerfile', 'pipeline/src/tsconfig.json']
                    for (file in requiredFiles) {
                        if (!fileExists(file)) {
                            error "‚ùå Required file missing: ${file}"
                        }
                    }
                    echo "‚úÖ All required files exist."
                }
            }
        }

        stage('Build Application') {
            agent { label 'build-node' }
            steps {
                dir("pipeline/src") {
                    script {
                        echo "üì¶ Building application..."
                        sh '''
                            set -e
                            echo "Node version: $(node -v)"
                            echo "NPM version: $(npm -v)"
                            npm install
                            npm run build
                        '''
                    }
                }
            }
        }

        stage('Verify Build Artifacts') {
            agent { label 'build-node' }
            steps {
                dir("pipeline/src") {
                    script {
                        def DIST_DIR = "dist"
                        if (!fileExists(DIST_DIR)) {
                            echo "‚ùå Build failed or dist folder not found."
                            echo "Contents of pipeline/src for debugging:"
                            sh "ls -l"
                            error "Build artifacts missing. Check npm build logs above."
                        } else {
                            echo "‚úÖ Build artifacts found in ${DIST_DIR}"
                            sh "ls -l ${DIST_DIR}"
                        }
                    }
                }
            }
        }

        stage('Run Database Migrations') {
            agent { label 'build-node' }
            when {
                allOf {
                    expression { params.MIGRATE == true }
                    expression { fileExists('pipeline/src/dist/migrate.js') }
                }
            }
            steps {
                dir("pipeline/src") {
                    script {
                        try {
                            echo "Backing up database..."
                            sh """
                                PGPASSWORD=${DB_PASS} pg_dump -h ${DB_HOST} -U ${DB_USER} -p ${DB_PORT} \
                                -F p -f ${BACKUP_FILE} ${DB_NAME}
                            """
                            echo "Running migrations..."
                            sh "node dist/migrate.js"
                            echo "‚úÖ Migrations completed."
                        } catch (err) {
                            echo "‚ùå Migration failed! Restoring database..."
                            sh """
                                PGPASSWORD=${DB_PASS} psql -h ${DB_HOST} -U ${DB_USER} -p ${DB_PORT} \
                                -d ${DB_NAME} -f ${BACKUP_FILE}
                            """
                            error "Migration failed. Database restored."
                        }
                    }
                }
            }
        }

        stage('Build & Push Docker Image') {
            agent { label 'docker-node' }
            steps {
                dir('pipeline/src') {
                    script {
                        if (!fileExists("dist")) error "‚ùå dist folder missing. Build application first."
                        if (!fileExists("Dockerfile")) error "‚ùå Dockerfile missing."

                        echo "‚úÖ Ready for Docker build."

                        withCredentials([usernamePassword(credentialsId: 'docker-hub-creds', 
                                                          usernameVariable: 'DOCKER_USER', 
                                                          passwordVariable: 'DOCKER_PASS')]) {
                            sh """
                                docker login -u $DOCKER_USER -p $DOCKER_PASS
                                docker build -t ${DOCKER_IMAGE}:latest -f Dockerfile .
                                docker push ${DOCKER_IMAGE}:latest
                            """
                        }
                    }
                }
            }
        }

        stage('Deploy to Development') {
            agent { label 'docker-node' }
            steps {
                script {
                    sh """
                        # Stop and remove old container if exists
                        docker rm -f ${CONTAINER_NAME} || true

                        # Optional: remove dangling images to save space
                        docker image prune -f

                        # Run new container on specified host IP and port
                        docker run -d --name ${CONTAINER_NAME} \\
                            -p ${HOST_IP}:${HOST_PORT}:${CONTAINER_PORT} \\
                            -e DB_HOST=${DB_HOST} \\
                            -e DB_PORT=${DB_PORT} \\
                            -e DB_NAME=${DB_NAME} \\
                            -e DB_USER=${DB_USER} \\
                            -e DB_PASS=${DB_PASS} \\
                            ${DOCKER_IMAGE}:latest
                    """
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Pipeline finished successfully. App running at http://${HOST_IP}:${HOST_PORT}"
        }
        failure {
            echo "‚ùå Pipeline failed. Check logs."
        }
    }
}
