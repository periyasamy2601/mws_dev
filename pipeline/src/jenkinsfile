pipeline {
    agent none

    parameters {
        booleanParam(name: 'MIGRATE', defaultValue: true, description: 'Run database migrations')
    }

    environment {
        DOCKER_IMAGE       = "mwsdev2025/mws_avk_api"
        SONAR_HOST         = "http://192.168.2.20:9000"
        SONAR_PROJECT_KEY  = "mws_avk_api"
        SONAR_PROJECT_NAME = "mws_avk_api"
        DB_HOST            = "192.168.2.20"
        DB_PORT            = "5432"
        DB_NAME            = "mws_avk_api"
        DB_USER            = "mws_avk_api"
        DB_PASS            = "qwert"
        NPM_TOKEN          = credentials('github_npm_token')
        BACKUP_FILE        = "/tmp/${DB_NAME}_backup.sql"
    }

    stages {

        stage('Checkout') {
            agent { label 'build-node' }
            steps {
                deleteDir()
                git branch: 'main', url: 'https://github.com/periyasamy2601/mws_dev.git'
            }
        }

        stage('SonarQube Scan') {
            agent { label 'build-node' }
            steps {
                script {
                    def SRC_DIR = "pipeline/src"
                    dir("${SRC_DIR}") {
                        withSonarQubeEnv('sonar scanner') {
                            def scannerHome = tool 'sonar scanner'
                            sh """
                                ${scannerHome}/bin/sonar-scanner \
                                -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                                -Dsonar.projectName=${SONAR_PROJECT_NAME} \
                                -Dsonar.sources=. \
                                -Dsonar.host.url=${SONAR_HOST} \
                                -Dsonar.scanner.workDirectory=/tmp/.sonar
                            """
                        }
                    }
                }
            }
        }

        stage('Install Dependencies') {
            agent { label 'build-node' }
            steps {
                script {
                    def SRC_DIR = "pipeline/src"
                    dir("${SRC_DIR}") {
                        sh 'npm install'
                        sh 'npm install --save-dev @loopback/build'
                    }
                }
            }
        }

        stage('Build Application') {
            agent { label 'build-node' }
            steps {
                script {
                    def SRC_DIR = "pipeline/src"
                    dir("${SRC_DIR}") {
                        sh 'npm run build'
                    }
                }
            }
        }

        stage('Check for Migration Scripts') {
            agent { label 'build-node' }
            steps {
                script {
                    def SRC_DIR = "pipeline/src"
                    dir("${SRC_DIR}") {
                        def migrationFiles = sh(script: "ls migrate.ts || true", returnStdout: true).trim()
                        env.MIGRATIONS_EXIST = migrationFiles ? 'true' : 'false'
                        echo env.MIGRATIONS_EXIST == 'true' ? "Migration script detected" : "No migration script found"
                    }
                }
            }
        }

        stage('Run Database Migrations') {
            agent { label 'build-node' }
            when {
                allOf {
                    expression { params.MIGRATE == true }
                    expression { env.MIGRATIONS_EXIST == 'true' }
                }
            }
            steps {
                script {
                    def SRC_DIR = "pipeline/src"
                    def DIST_DIR = "dist"
                    dir("${SRC_DIR}") {
                        try {
                            echo "Backing up database..."
                            sh """
                                PGPASSWORD=${DB_PASS} pg_dump -h ${DB_HOST} -U ${DB_USER} -p ${DB_PORT} \
                                -F p -f ${BACKUP_FILE} ${DB_NAME}
                            """
                            echo "Running migrations..."
                            sh "node ${DIST_DIR}/migrate.js"
                            echo "Migrations completed."
                        } catch (err) {
                            echo "Migration failed! Restoring database..."
                            sh """
                                PGPASSWORD=${DB_PASS} psql -h ${DB_HOST} -U ${DB_USER} -p ${DB_PORT} \
                                -d ${DB_NAME} -f ${BACKUP_FILE}
                            """
                            error "Migration failed. Database restored."
                        }
                    }
                }
            }
        }

        stage('Make JS Executable') {
            agent { label 'build-node' }
            steps {
                script {
                    def DIST_DIR = "pipeline/src/dist"
                    sh "find ${DIST_DIR} -type f -name '*.js' -exec chmod +x {} \\;"
                }
            }
        }

        stage('Build Docker Image') {
            agent { label 'docker-node' }
            steps {
                script {
                    // Use repo root as build context and point to Dockerfile in pipeline/src
                    sh """
                        docker build -t ${DOCKER_IMAGE}:latest -f pipeline/src/Dockerfile .
                        docker push ${DOCKER_IMAGE}:latest
                    """
                }
            }
        }

        stage('Publish to GitHub Packages') {
            agent { label 'build-node' }
            steps {
                script {
                    def SRC_DIR = "pipeline/src"
                    dir("${SRC_DIR}") {
                        sh 'npm publish --access public'
                    }
                }
            }
        }

    }

    post {
        success {
            echo "Pipeline finished successfully."
        }
        failure {
            echo "Pipeline failed."
        }
        always {
            cleanWs()
        }
    }
}
