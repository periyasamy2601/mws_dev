pipeline {
    agent none

    parameters {
        booleanParam(name: 'MIGRATE', defaultValue: true, description: 'Run database migrations')
    }

    environment {
        DB_HOST            = "192.168.2.20"
        DB_PORT            = "5432"
        DB_NAME            = "mws_avk_api"
        DB_USER            = "mws_avk_api"
        DB_PASS            = "qwert"
        BACKUP_FILE        = "/tmp/${DB_NAME}_backup.sql"
        SRC_DIR            = "${WORKSPACE}/pipeline/src"
        DIST_DIR           = "${SRC_DIR}/dist"
    }

    stages {

        // Checkout stage to pull the latest code
        stage('Checkout') {
            agent { label 'build-node' }
            steps {
                deleteDir()
                git branch: 'main', url: 'https://github.com/periyasamy2601/mws_dev.git'
            }
        }

        // Run Database Migrations stage
        stage('Run Database Migrations') {
            agent { label 'build-node' }
            when {
                expression { return params.MIGRATE == true }
            }
            steps {
                script {
                    def DIST_DIR = "${SRC_DIR}/dist"
                    dir("${SRC_DIR}") {
                        try {
                            echo "Backing up database..."
                            sh """
                                PGPASSWORD=${DB_PASS} pg_dump -h ${DB_HOST} -U ${DB_USER} -p ${DB_PORT} \
                                -F p -f ${BACKUP_FILE} ${DB_NAME}
                            """
                            echo "Running migrations..."
                            sh "node ${DIST_DIR}/migrate.js"
                            echo "Migrations completed."
                        } catch (err) {
                            echo "Migration failed! Restoring database..."
                            sh """
                                PGPASSWORD=${DB_PASS} psql -h ${DB_HOST} -U ${DB_USER} -p ${DB_PORT} \
                                -d ${DB_NAME} -f ${BACKUP_FILE}
                            """
                            error "Migration failed. Database restored."
                        }
                    }
                }
            }
        }

    }

    post {
        success {
            echo "Pipeline finished successfully."
        }
        failure {
            echo "Pipeline failed."
        }
        always {
            cleanWs()
        }
    }
}
