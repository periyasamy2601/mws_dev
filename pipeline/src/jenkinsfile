pipeline {
    agent none

    environment {
        DOCKER_IMAGE       = "mwsdev2025/mws_avk_api"
        SONAR_HOST         = "http://192.168.2.20:9000"
        SONAR_PROJECT_KEY  = "mws_avk_api"
        SONAR_PROJECT_NAME = "mws_avk_api"
        DB_HOST            = "192.168.2.20"
        DB_PORT            = "5432"
        DB_NAME            = "mws_avk_api"
        DB_USER            = "mws_avk_api"
        DB_PASS            = "qwert"
        NPM_TOKEN          = credentials('github_npm_token')
    }

    stages {

        stage('Checkout') {
            agent { label 'build-node' }
            steps {
                deleteDir()
                git branch: 'main', url: 'https://github.com/periyasamy2601/mws_dev.git'
            }
        }

        stage('SonarQube Scan') {
            agent { label 'build-node' }
            steps {
                withSonarQubeEnv('sonar scanner') {
                    script {
                        def scannerHome = tool 'sonar scanner'
                        sh """
                            ${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                            -Dsonar.projectName=${SONAR_PROJECT_NAME} \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=${SONAR_HOST} \
                            -Dsonar.scanner.workDirectory=/tmp/.sonar
                        """
                    }
                }
            }
        }

        stage('Install Dependencies') {
            agent { label 'build-node' }
            steps {
                dir('pipeline/src') {
                    sh 'npm install'
                }
            }
        }

        stage('Check for Migration Scripts') {
            agent { label 'build-node' }
            steps {
                dir('pipeline/src') {
                    script {
                        def migrationFiles = sh(script: "ls migrations/*.ts || true", returnStdout: true).trim()
                        if (migrationFiles) {
                            echo "New migration scripts detected:\n${migrationFiles}"
                            env.MIGRATIONS_EXIST = 'true'
                        } else {
                            echo "No migration scripts detected."
                            env.MIGRATIONS_EXIST = 'false'
                        }
                    }
                }
            }
        }

        stage('Run Database Migrations') {
            agent { label 'build-node' }
            when {
                expression { return env.MIGRATIONS_EXIST == 'true' }
            }
            steps {
                dir('pipeline/src') {
                    echo "Running database migrations..."
                    sh """
                        export DB_HOST=${DB_HOST}
                        export DB_PORT=${DB_PORT}
                        export DB_USER=${DB_USER}
                        export DB_PASS=${DB_PASS}
                        export DB_NAME=${DB_NAME}

                        npx typeorm migration:run --config ./ormconfig.json
                    """
                    // Or for Sequelize:
                    // sh 'npx sequelize db:migrate'
                }
            }
        }

        stage('Build') {
            agent { label 'build-node' }
            steps {
                dir('pipeline/src') {
                    sh 'npm run build'
                }
            }
        }

        stage('Make JS Executable') {
            agent { label 'build-node' }
            steps {
                dir('pipeline/src') {
                    sh 'find ./dist -type f -name "*.js" -exec chmod +x {} \\;'
                }
            }
        }

        stage('Publish to GitHub Packages') {
            agent { label 'build-node' }
            steps {
                dir('pipeline/src') {
                    sh 'npm publish --access public'
                }
            }
        }

    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline finished successfully.'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
